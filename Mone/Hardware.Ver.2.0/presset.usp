/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Store,Recall,_SKIP_,Presset[10],_SKIP_,input_d[120],_SKIP_;
ANALOG_INPUT input_a[30,1];
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT out_d_on[120],_SKIP_,out_d_off[120],_SKIP_;
ANALOG_OUTPUT out_a[30,1];
// STRING_OUTPUT 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ID_num;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER iArray[150],iArray2[150];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function StoreFunc(integer number_presset)
{
integer nFileHandle,iErrorCode,x,y;
string id_s[255];
for(x=1 to 150)
{
		if(x<31)
		{
 		iArray[x]=input_a[x];
		}
		else
		{
		y=x-30;
		if(input_d[y]>0)
		IArray[x]=1;
		else
		IArray[x]=0;
		}
}
switch(number_presset)
{
case(1):
{
				id_s="\\CF0\\Presset1_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(2):
{
				id_s="\\CF0\\Presset2_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY );
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(3):
{
				id_s="\\CF0\\Presset3_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(4):
{
				id_s="\\CF0\\Presset4_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(5):
{
				id_s="\\CF0\\Presset5_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(6):
{
				id_s="\\CF0\\Presset6_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(7):
{
				id_s="\\CF0\\Presset7_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(8):
{
				id_s="\\CF0\\Presset8_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(9):
{
				id_s="\\CF0\\Presset9_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
case(10):
{
				id_s="\\CF0\\Presset10_"+itoa(ID_num);
				StartFileOperations();
				if(FileDelete (id_s)<>0)
				PRINT ( "Error deleting file\n" );
    			nFileHandle = FileOpen( id_s, _O_WRONLY | _O_CREAT | _O_BINARY);
    			IF (nFileHandle >= 0)
    			{
      			iErrorCode = WriteIntegerArray(nFileHandle, iArray);
      			if (iErrorCode > 0)
        		PRINT ( "Array written to file correctly.\n");
      			else
        		PRINT ( "Error code %d\n", iErrorCode);
      			IF ( FileClose ( nFileHandle ) <> 0 )
				{
        		PRINT ( "Error closing file\n" );
				}
				}
				EndFileOperations();
}
}
}

Function RestoreFunc (integer number_presset)
{
integer nFileHandle,iErrorCode,x,y;
string id_s[255];
switch (number_presset)
{
case(1):
{
	id_s="\\CF0\\Presset1_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}
case(2):
{
	id_s="\\CF0\\Presset2_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(3):
{
	id_s="\\CF0\\Presset3_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(4):
{
	id_s="\\CF0\\Presset4_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(5):
{
	id_s="\\CF0\\Presset5_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(6):
{
	id_s="\\CF0\\Presset6_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(7):
{
	id_s="\\CF0\\Presset7_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(8):
{
	id_s="\\CF0\\Presset8_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(9):
{
	id_s="\\CF0\\Presset9_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

case(10):
{
	id_s="\\CF0\\Presset10_"+itoa(ID_num);
	StartFileOperations();
		nFileHandle = FileOpen (id_s, _O_RDONLY | _O_BINARY);
		IF (nFileHandle >= 0)
		{
		iErrorCode = ReadIntegerArray(nFileHandle, iArray2);
      	if (iErrorCode > 0)
        PRINT ( "Read array from file correctly.\n");
      	else
        PRINT ( "Error code %d\n", iErrorCode);
		IF ( FileClose ( nFileHandle ) <> 0 )
 		PRINT ( "Error closing file\n" );
		}
	EndFileOperations();
}

}
delay(100);
for(x=1 to 150)
{
if(x<31)
	{
		out_a[x]=iArray2[x];
	}
if(x>30)
{
y=x-30;
if(iArray2[x]>0)
pulse(10,out_d_on[y]);
else
pulse(10,out_d_off[y]);
}
}

}


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Recall
{
integer x;
for(x=1 to 10)
{
if(presset[x]>0)
	{
	 RestoreFunc(x);		
	}
}
}

PUSH Store
{
integer x;
for(x=1 to 10)
{
if(presset[x]>0)
	{
	 StoreFunc(x);		
	}
}
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

